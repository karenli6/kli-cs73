// wave magnitude represents how many crashes were occurring at this moment
// combining 4 different variables: frequency, time slot, geographical location, and year
// 24 hour clock

// data: https://www.kaggle.com/datasets/sobhanmoosavi/us-accidents  
// data processing notebook: tinyurl.com/us-traffic-accidents 
let c;

// parameters

let ticks = 24*2;
let t = 0;
let current_time;
// delay parameter
let time_tick;

let topbound = 50;
let bottom = 72;
let targetkey = '45 50';
// info per year
let all_years = ["2016", "2017", "2018", "2019", "2020", "2021"]

	let foundmax= false;
let MAXHOUR;
let MAXVAL;

let all_colors = {"2016":'#8fc276', "2017":'#76c2bd', 
									"2018":'#767cc2', "2019":'#9f76c2', 
									"2020":'#c276b9', "2021":'#c27683'}

let start_arrow = 2016;

// data values 
let magnitudes = {'2016': [802, 651, 577, 505, 542, 521, 748, 833, 704, 1158, 1546, 2066, 2749, 3763, 4276, 4937, 5046, 4718, 3946, 3316, 2921, 2814, 2510, 2842, 2934, 3636, 2593, 3392, 3132, 3929, 4132, 4721, 4632, 4798, 4898, 5034, 4234, 3675, 2526, 2069, 1411, 1340, 638, 759, 708, 828, 810, 704], '2017': [1174, 1065, 1012, 909, 1026, 942, 1091, 990, 967, 1305, 1951, 2594, 3331, 4513, 5165, 6010, 6223, 5687, 4837, 4106, 3684, 3437, 3188, 3452, 4158, 4775, 3615, 4728, 4542, 5753, 5633, 6482, 6668, 6958, 7072, 7085, 5909, 4876, 3350, 2692, 1769, 1817, 1051, 1288, 1125, 1438, 1195, 1280], '2018': [1042, 1044, 844, 824, 928, 928, 922, 917, 925, 1245, 1984, 2923, 3547, 4598, 5235, 5867, 6188, 5705, 4987, 4172, 3656, 3278, 3325, 3533, 3925, 4476, 4003, 4793, 4577, 5597, 5516, 6673, 6462, 6636, 6634, 6896, 5972, 4905, 3557, 2777, 1977, 1801, 1296, 1382, 1210, 1326, 1038, 1130], '2019': [2079, 3038, 1428, 1602, 1571, 1627, 1478, 1506, 1415, 1880, 2440, 3763, 4733, 6291, 7027, 8628, 8389, 8096, 7210, 6467, 5597, 5474, 5122, 5412, 6187, 6357, 6560, 6644, 7047, 7762, 8521, 9378, 9797, 10029, 10970, 11161, 9412, 8028, 6538, 5611, 4441, 3987, 3354, 3379, 2948, 3096, 2421, 2714], '2020': [12644, 12335, 11955, 12458, 11324, 10040, 8678, 7935, 7045, 7228, 7232, 8488, 9068, 10155, 10238, 11284, 10851, 9936, 8574, 8016, 7858, 8128, 8501, 9919, 12842, 16373, 18357, 20073, 19395, 19114, 19303, 20288, 20158, 20172, 19722, 19698, 19245, 16376, 14397, 13435, 13209, 13193, 13220, 13744, 13262, 13606, 13343, 13449], '2021': [17128, 15798, 13884, 13372, 13512, 12482, 11817, 11741, 12377, 15556, 19746, 25570, 27747, 30665, 30502, 36022, 30843, 29197, 26244, 26904, 27087, 29992, 30952, 34515, 37920, 40132, 44061, 47654, 53063, 57569, 60256, 63361, 61760, 60315, 64421, 56767, 47346, 39004, 31814, 28145, 25316, 24421, 24229, 22738, 21169, 20472, 18525, 17634]}
let percents = {'2016': [0.6572477545400904, 0.5335016062413951, 0.4728577984658756, 0.4138530125221268, 0.44417491640988654, 0.42696518717629317, 0.6129941650822789, 0.6826525929325379, 0.5769356847833214, 0.9489936405952927, 1.2669638759588278, 1.6931095522192356, 2.2528355077689635, 3.083819576476759, 3.5042286763259685, 4.045925391726217, 4.135252081557726, 3.8664525011473154, 3.2337900740837866, 2.7174981970759853, 2.3937913853012525, 2.3061037173015144, 2.056972398872353, 2.3290500229463054, 2.404445027207762, 2.979741690159313, 2.124991804890841, 2.7797810266832754, 2.5667081885530716, 3.219858388513735, 3.3862191044384713, 3.8689110338949715, 3.7959745623811707, 3.9320133744181476, 4.013964466006687, 4.125417950567101, 3.469809217858782, 3.0117026158788436, 2.0700845735265196, 1.695568084966892, 1.1563299023142988, 1.0981446272864355, 0.5228479643348849, 0.6220087851570183, 0.5802137284468629, 0.6785550383531108, 0.6638038418671737, 0.5769356847833214], '2017': [0.7162117644187947, 0.6497151014531656, 0.6173818616625385, 0.5545455654656597, 0.6259227174562891, 0.5746775826937859, 0.6655766907844166, 0.6039605168437877, 0.5899291108969118, 0.7961297722031748, 1.1902292609719494, 1.582498566356349, 2.032113617784502, 2.753205871228297, 3.150965726765822, 3.6664673800314787, 3.796410400322112, 3.4694176356470914, 2.9508656767408095, 2.5049109920814066, 2.2474651960126404, 2.0967800973657558, 1.9448748764626216, 2.1059310142876315, 2.5366341707439086, 2.9130418867970573, 2.2053709781720126, 2.88436901377518, 2.7708976439439232, 3.5096816701033444, 3.4364743347283397, 3.954416232506497, 4.067887602337755, 4.244805329494016, 4.31435229810027, 4.322283092765895, 3.6048512060908506, 2.974658060737686, 2.043704779218878, 1.6422845569126026, 1.0791981356531926, 1.1084810698031944, 0.6411742456594152, 0.7857587330250491, 0.6863187691406679, 0.8772679022438048, 0.7290230481094205, 0.7808782440000488], '2018': [0.6385743001421778, 0.6397999705839095, 0.5172329264107467, 0.5049762219934304, 0.568711084963475, 0.568711084963475, 0.5650340736382802, 0.5619698975339511, 0.5668725793008776, 0.762979849977938, 1.2158650781977742, 1.791317350590773, 2.1737265284110405, 2.817816345541011, 3.2081923812325344, 3.595504240819728, 3.792224346717655, 3.4962249350394665, 3.0562092464578123, 2.5567485414521745, 2.2405255674854145, 2.008873853998137, 2.0376771093788304, 2.1651468353189194, 2.4053782418983185, 2.7430504485953815, 2.453179389125852, 2.9373192136098445, 2.8049468059028286, 3.430038731185959, 3.380399078295828, 4.0894494288375745, 3.9601411972348877, 4.066774525665539, 4.065548855223807, 4.22611168309065, 3.6598519390106388, 3.005956758346816, 2.1798548806196987, 1.7018434083443643, 1.2115752316517134, 1.1037162327793302, 0.7942344462420944, 0.8469382752365544, 0.7415306172476345, 0.8126195028680689, 0.6361229592587145, 0.6925037995783694], '2019': [0.8038976857490865, 1.1747191771552308, 0.5521721477872513, 0.6194536279798155, 0.6074666976006805, 0.6291205073178276, 0.5715059064632756, 0.5823328113218491, 0.547145370531485, 0.72694932621851, 0.9434874233899813, 1.4550586779575818, 1.8301335962724514, 2.4325735166173654, 2.717166444328442, 3.336233397134737, 3.243818030663341, 3.1305222048218395, 2.7879280010826903, 2.5006283471569706, 2.1642209461941495, 2.11665989985113, 1.9805502387719196, 2.09268603909286, 2.392359298571235, 2.458094078069718, 2.5365891382943757, 2.5690698528700966, 2.7248999477988516, 3.0013726968659977, 3.294859153568045, 3.6262397772751003, 3.788256674980183, 3.877965315236935, 4.241826653519711, 4.315681611662123, 3.6393867331747964, 3.1042282930224463, 2.528082284476925, 2.1696343986234363, 1.7172244456044699, 1.5416739168261702, 1.2969085319877038, 1.3065754113257158, 1.1399184115383871, 1.1971463372194189, 0.9361405950930921, 1.0494364209345939], '2020': [2.0202472102565414, 1.9708754617616606, 1.9101593956514513, 1.9905282936868072, 1.8093387700842356, 1.6041823782802653, 1.3865632150115679, 1.2678473278539746, 1.1256439098590107, 1.154883489064717, 1.1555226055500876, 1.3562051819564633, 1.4488770723352038, 1.6225569772346708, 1.6358186443061111, 1.8029476052305295, 1.7337632456891592, 1.587565349660629, 1.3699461863919318, 1.2807894366827297, 1.25554433551059, 1.2986846982731073, 1.358282310533918, 1.584849104597804, 2.0518834762823874, 2.616063553743305, 2.9330653304871346, 3.207246302711132, 3.0989160584408113, 3.054018125343525, 3.084216379277287, 3.241598813799803, 3.220827528025258, 3.2230644357240554, 3.1511638311198595, 3.147329132207636, 3.0749491902394133, 2.616542891107333, 2.300340009970217, 2.146632495238582, 2.110522413815142, 2.1079659478736597, 2.112279984149911, 2.196004243733463, 2.1189907072463026, 2.1739547249881763, 2.1319328160750577, 2.1488694029373794], '2021': [1.1329953133630342, 1.045017512874195, 0.9184088586368733, 0.8845407128847788, 0.8938015339888672, 0.825668350151646, 0.7816794499072265, 0.7766521470221499, 0.8187227343235798, 1.0290095221085567, 1.3061726680094858, 1.6914228259395598, 1.8354285941081332, 2.0284505654062026, 2.017668323692157, 2.3828092700819252, 2.0402250379528293, 1.9313442412576196, 1.7360070646835277, 1.7796652213170874, 1.791770437474574, 1.983932475384407, 2.0474352486695837, 2.2831231457686316, 2.508359544764494, 2.6546805182090893, 2.914578847623111, 3.1522512063873207, 3.5100496446159903, 3.80811578672329, 3.9858574031996135, 4.1912491855438585, 4.085345081346391, 3.989760177807765, 4.261366831046241, 3.7550645115412986, 3.1318773999583263, 2.5800647595990065, 2.104455447181899, 1.861755785532613, 1.6746210505078567, 1.6154179441638636, 1.6027173895068283, 1.5040896447482874, 1.4003022996603265, 1.3541966403064007, 1.225405078237401, 1.1664665667820961]};
let lat_ranges = ['24 27', '27 30','30 33','33 36', '36 39', 	'39 42', '42 45','45 50']
let lat_info_magnitudes= {
	'24 27': {'2016': [25, 33, 23, 22, 7, 17, 24, 7, 23, 31, 41, 61, 65, 92, 121, 113, 143, 142, 140, 121, 112, 85, 74, 75, 81, 110, 66, 116, 96, 162, 124, 159, 129, 176, 128, 136, 112, 117, 97, 70, 67, 73, 23, 27, 31, 28, 19, 26], '2017': [52, 55, 51, 40, 31, 35, 45, 36, 42, 33, 77, 103, 110, 200, 224, 267, 280, 285, 305, 223, 161, 154, 120, 147, 170, 199, 124, 228, 205, 260, 283, 292, 271, 272, 236, 221, 154, 204, 132, 118, 90, 121, 31, 35, 24, 44, 38, 49], '2018': [46, 53, 31, 34, 27, 31, 35, 33, 31, 42, 77, 94, 115, 170, 203, 184, 266, 229, 209, 196, 173, 136, 102, 115, 157, 150, 103, 188, 167, 170, 205, 232, 223, 225, 249, 196, 164, 173, 119, 82, 70, 48, 26, 21, 30, 32, 36, 48], '2019': [62, 163, 25, 37, 28, 37, 39, 38, 24, 37, 75, 67, 73, 125, 186, 217, 236, 244, 212, 137, 101, 100, 104, 85, 61, 93, 85, 62, 83, 73, 93, 140, 140, 156, 149, 145, 168, 108, 101, 97, 78, 52, 37, 33, 34, 30, 36, 43], '2020': [737, 745, 651, 556, 731, 643, 608, 541, 455, 435, 363, 311, 368, 418, 428, 391, 365, 364, 279, 281, 282, 292, 416, 750, 1309, 2370, 2772, 2870, 2244, 1149, 814, 751, 648, 639, 631, 597, 667, 576, 514, 575, 634, 602, 611, 685, 698, 654, 767, 764], '2021': [715, 702, 610, 538, 550, 575, 750, 905, 1121, 1822, 2430, 3207, 2849, 2642, 2362, 2993, 2832, 2854, 1972, 1981, 2088, 2233, 2342, 2724, 3568, 4064, 4779, 5442, 6286, 6382, 6897, 7015, 7125, 6643, 6610, 5151, 4596, 3651, 2618, 1908, 1444, 1268, 1183, 1104, 1021, 947, 872, 748]}, 
	'27 30': {'2016': [55, 66, 40, 23, 52, 26, 45, 46, 70, 78, 85, 127, 198, 279, 300, 255, 294, 293, 315, 261, 203, 240, 202, 223, 204, 256, 171, 207, 196, 275, 314, 304, 295, 298, 315, 309, 236, 219, 162, 127, 108, 105, 39, 50, 41, 51, 40, 52], '2017': [93, 77, 72, 63, 73, 80, 88, 90, 72, 85, 146, 156, 234, 361, 361, 418, 369, 349, 366, 333, 269, 275, 228, 279, 301, 336, 252, 420, 366, 429, 504, 566, 574, 583, 547, 505, 342, 327, 224, 205, 146, 121, 52, 70, 68, 82, 61, 104], '2018': [64, 49, 43, 42, 48, 54, 40, 63, 33, 77, 108, 166, 239, 312, 324, 342, 339, 289, 296, 199, 178, 155, 203, 179, 234, 255, 204, 381, 292, 405, 434, 491, 492, 585, 469, 420, 384, 325, 239, 178, 151, 112, 62, 64, 42, 46, 37, 57], '2019': [37, 127, 26, 44, 35, 42, 54, 48, 50, 71, 60, 102, 132, 251, 299, 310, 351, 284, 263, 197, 152, 137, 149, 136, 142, 122, 152, 140, 169, 181, 176, 224, 238, 288, 280, 293, 273, 223, 151, 156, 134, 113, 65, 53, 58, 60, 65, 86], '2020': [1014, 950, 904, 811, 832, 862, 784, 654, 593, 449, 505, 525, 546, 677, 621, 635, 630, 567, 558, 570, 520, 644, 632, 725, 948, 1501, 1678, 1632, 1431, 1225, 1072, 1037, 1096, 1103, 1078, 1053, 1046, 940, 879, 934, 924, 956, 882, 936, 949, 943, 942, 1087], '2021': [1392, 1211, 1098, 1051, 1145, 1080, 1008, 1162, 1319, 1510, 1962, 2238, 2281, 2767, 2349, 3124, 2752, 2714, 2422, 2641, 2428, 2921, 3064, 3405, 4064, 4184, 5024, 5097, 5853, 6315, 6299, 7379, 6745, 7060, 7401, 6357, 5155, 4358, 3208, 2938, 2335, 2307, 2263, 1996, 1703, 1774, 1456, 1691]},
	'30 33': {'2016': [66, 47, 40, 39, 46, 38, 56, 80, 95, 91, 132, 160, 274, 362, 358, 373, 370, 320, 298, 250, 237, 219, 212, 249, 187, 256, 248, 287, 221, 310, 377, 403, 405, 399, 428, 394, 360, 301, 212, 183, 130, 113, 63, 64, 57, 65, 68, 66], '2017': [108, 79, 88, 69, 91, 53, 99, 87, 100, 106, 129, 211, 321, 390, 415, 430, 440, 413, 371, 280, 229, 238, 224, 252, 283, 339, 309, 396, 369, 465, 477, 497, 507, 530, 527, 536, 405, 353, 260, 217, 110, 116, 64, 86, 102, 125, 111, 116], '2018': [82, 78, 37, 62, 58, 49, 67, 60, 66, 83, 155, 240, 299, 393, 457, 469, 460, 402, 346, 320, 263, 226, 230, 266, 257, 331, 314, 339, 315, 374, 390, 466, 468, 436, 448, 452, 395, 352, 244, 205, 154, 97, 56, 79, 79, 75, 66, 70], '2019': [70, 100, 53, 51, 57, 74, 51, 79, 47, 85, 128, 161, 225, 318, 314, 377, 345, 394, 350, 335, 249, 232, 182, 239, 283, 250, 263, 289, 294, 334, 409, 409, 474, 451, 537, 494, 408, 309, 267, 185, 165, 161, 105, 124, 118, 113, 86, 153], '2020': [1155, 1158, 1093, 1247, 1121, 999, 916, 795, 689, 697, 628, 771, 721, 770, 737, 733, 853, 742, 715, 623, 589, 585, 588, 748, 824, 1140, 1288, 1476, 1503, 1428, 1438, 1492, 1560, 1664, 1548, 1571, 1583, 1426, 1257, 1200, 1040, 1091, 1082, 1165, 1152, 1283, 1299, 1371], '2021': [1685, 1551, 1419, 1360, 1455, 1367, 1209, 1170, 1102, 1370, 1768, 2460, 2647, 2951, 3039, 3481, 2727, 2737, 2491, 2552, 2459, 2852, 2846, 3177, 3706, 4005, 4151, 4246, 4881, 5505, 5424, 5652, 5931, 5931, 6125, 5337, 4447, 3745, 3070, 2778, 2531, 2445, 2542, 2192, 2104, 2060, 1830, 1689]},
	'33 36': {'2016': [185, 107, 131, 76, 97, 81, 237, 284, 187, 292, 387, 557, 600, 798, 968, 1144, 1140, 1090, 905, 746, 659, 632, 523, 619, 844, 1058, 837, 985, 869, 1102, 1141, 1233, 1140, 1192, 1199, 1150, 1034, 958, 700, 594, 294, 314, 153, 188, 129, 130, 205, 105], '2017': [260, 205, 223, 197, 229, 210, 254, 270, 225, 288, 401, 589, 654, 882, 1059, 1302, 1330, 1230, 994, 869, 827, 803, 647, 745, 1273, 1411, 1121, 1332, 1218, 1607, 1494, 1665, 1707, 1713, 1763, 1836, 1538, 1244, 925, 664, 392, 386, 271, 292, 241, 240, 212, 227], '2018': [231, 192, 198, 188, 186, 190, 220, 180, 198, 347, 441, 619, 689, 903, 1024, 1171, 1234, 1230, 985, 902, 675, 667, 616, 744, 914, 1087, 1004, 1193, 1151, 1506, 1415, 1651, 1713, 1579, 1585, 1847, 1510, 1168, 863, 620, 309, 339, 245, 233, 212, 227, 200, 194], '2019': [624, 712, 392, 486, 467, 491, 466, 487, 416, 584, 601, 1151, 1412, 1612, 1750, 2313, 2183, 2029, 1781, 1585, 1367, 1321, 1308, 1486, 1662, 1734, 1952, 2059, 2121, 2431, 2624, 2910, 2955, 2910, 3371, 3420, 2850, 2385, 1954, 1620, 1276, 1125, 903, 899, 843, 852, 682, 738], '2020': [3544, 3247, 3146, 3623, 3193, 2750, 2259, 2200, 1867, 1987, 2017, 2479, 2698, 2784, 2945, 3367, 3330, 3143, 2461, 2323, 2299, 2454, 2384, 2712, 3507, 4244, 4585, 5032, 5131, 5478, 5555, 5773, 5687, 5856, 5582, 5850, 5955, 4961, 4143, 3843, 3796, 3813, 3717, 3866, 3653, 3756, 3530, 3445], '2021': [4855, 4545, 3840, 3738, 3774, 3580, 3368, 3184, 3432, 4224, 5533, 6836, 7353, 8200, 7852, 9284, 7799, 7223, 6719, 7047, 7119, 7911, 7768, 9178, 9751, 10220, 11360, 12341, 13002, 14265, 14534, 15345, 14394, 13839, 15495, 14084, 12129, 9753, 8047, 7102, 6446, 6225, 6294, 5939, 5701, 5415, 5080, 4703]},
	'36 39': {'2016': [146, 84, 76, 81, 75, 87, 126, 148, 93, 238, 279, 413, 500, 655, 766, 941, 965, 888, 725, 618, 559, 523, 441, 492, 498, 686, 438, 549, 558, 732, 797, 926, 903, 914, 930, 1037, 825, 684, 426, 405, 199, 178, 75, 123, 95, 92, 157, 100], '2017': [161, 157, 138, 95, 130, 116, 157, 132, 130, 226, 342, 433, 615, 797, 834, 1027, 1030, 985, 731, 692, 575, 522, 535, 565, 620, 738, 539, 700, 660, 926, 872, 1085, 1151, 1178, 1194, 1245, 1022, 878, 541, 454, 218, 205, 129, 147, 117, 162, 163, 172], '2018': [129, 128, 109, 89, 115, 124, 97, 123, 107, 197, 308, 461, 616, 735, 852, 884, 981, 924, 763, 615, 522, 499, 479, 460, 566, 612, 576, 692, 707, 873, 894, 1154, 1036, 1144, 1183, 1160, 1048, 800, 599, 458, 238, 199, 138, 182, 146, 171, 125, 157], '2019': [422, 486, 291, 310, 336, 308, 236, 236, 221, 270, 440, 657, 869, 1208, 1382, 1820, 1680, 1528, 1378, 1265, 1103, 1040, 1001, 1064, 1180, 1162, 1169, 1236, 1383, 1594, 1858, 2102, 2177, 2214, 2402, 2593, 2087, 1706, 1349, 1194, 840, 719, 674, 717, 567, 614, 435, 458], '2020': [2426, 2239, 2437, 2461, 2090, 1850, 1590, 1366, 1276, 1259, 1354, 1558, 1638, 1902, 1818, 2195, 2060, 1845, 1672, 1479, 1546, 1472, 1521, 1811, 2342, 2560, 2996, 3333, 3322, 3517, 3768, 4161, 4002, 4007, 4113, 3999, 4081, 3188, 2923, 2642, 2589, 2586, 2558, 2695, 2600, 2651, 2553, 2597], '2021': [3085, 2889, 2452, 2474, 2545, 2166, 1977, 1882, 1876, 2411, 3122, 4108, 4625, 5381, 5509, 6206, 5458, 4836, 4544, 4663, 4989, 5259, 5672, 6521, 6672, 6876, 7356, 8038, 9293, 10453, 10977, 11106, 11091, 11064, 11852, 10592, 8740, 6955, 5741, 5120, 4598, 4465, 4333, 4272, 3943, 3831, 3286, 3230]},
	
	'39 42': {'2016': [201, 211, 189, 179, 174, 169, 180, 164, 169, 255, 435, 509, 715, 1007, 1156, 1386, 1352, 1289, 1044, 860, 731, 705, 674, 745, 721, 824, 547, 849, 785, 888, 938, 1114, 1129, 1186, 1282, 1263, 1099, 956, 628, 462, 426, 430, 205, 209, 228, 315, 209, 219], '2017': [326, 331, 290, 313, 294, 295, 269, 233, 261, 343, 546, 708, 922, 1209, 1464, 1591, 1688, 1511, 1241, 1094, 1015, 854, 851, 847, 897, 1040, 771, 992, 1083, 1214, 1174, 1410, 1504, 1578, 1560, 1545, 1494, 1175, 851, 663, 543, 609, 310, 406, 348, 442, 379, 384], '2018': [257, 318, 200, 206, 248, 249, 252, 225, 276, 262, 442, 766, 919, 1208, 1379, 1639, 1688, 1516, 1373, 1088, 989, 828, 887, 860, 877, 1022, 922, 1018, 891, 1096, 1018, 1320, 1183, 1311, 1231, 1377, 1227, 1033, 756, 576, 531, 519, 362, 410, 317, 388, 275, 295], '2019': [386, 758, 259, 267, 263, 253, 270, 261, 317, 318, 488, 735, 923, 1248, 1353, 1684, 1673, 1584, 1434, 1258, 1056, 992, 889, 886, 1160, 1241, 1185, 1157, 1169, 1227, 1362, 1559, 1584, 1686, 1755, 1751, 1515, 1384, 1145, 1012, 795, 713, 602, 544, 548, 677, 472, 574], '2020': [2032, 2182, 1990, 1941, 1839, 1589, 1417, 1225, 1173, 1297, 1313, 1577, 1796, 2098, 2273, 2317, 2082, 1823, 1523, 1391, 1349, 1375, 1528, 1675, 2276, 2604, 2972, 3239, 3096, 3627, 3824, 4124, 4119, 3992, 3826, 3812, 3330, 2981, 2576, 2374, 2307, 2304, 2484, 2356, 2253, 2389, 2400, 2327], '2021': [3438, 3062, 2665, 2578, 2410, 2335, 2168, 2176, 2272, 2571, 3079, 4151, 4916, 5169, 5536, 6237, 5369, 5161, 4579, 4516, 4772, 4937, 5250, 5548, 5822, 6229, 6670, 7130, 7982, 8464, 9406, 9483, 9441, 8918, 9612, 8709, 7104, 6059, 5144, 4667, 4528, 4388, 4243, 4045, 3818, 3761, 3528, 3331]},
	'42 45': {'2016': [87, 66, 58, 48, 43, 68, 51, 64, 45, 110, 111, 139, 267, 388, 434, 537, 597, 495, 361, 332, 270, 282, 246, 305, 287, 295, 214, 313, 302, 341, 314, 469, 503, 478, 475, 595, 442, 322, 206, 134, 127, 99, 59, 66, 94, 111, 68, 98], '2017': [120, 117, 114, 92, 121, 110, 116, 82, 86, 131, 204, 228, 285, 447, 581, 732, 785, 697, 590, 428, 403, 406, 378, 407, 405, 495, 350, 464, 459, 610, 625, 720, 737, 834, 978, 926, 716, 527, 277, 263, 211, 195, 141, 156, 151, 239, 154, 147], '2018': [153, 161, 139, 130, 139, 143, 126, 143, 132, 152, 279, 327, 421, 517, 647, 777, 869, 757, 642, 514, 553, 466, 517, 567, 554, 605, 526, 612, 654, 734, 725, 893, 912, 867, 992, 931, 819, 650, 448, 384, 352, 314, 272, 235, 262, 245, 188, 206], '2019': [282, 507, 241, 242, 258, 240, 224, 221, 198, 308, 345, 485, 613, 851, 979, 1152, 1201, 1205, 1065, 1011, 912, 924, 821, 838, 930, 973, 1036, 952, 1071, 1094, 1179, 1263, 1431, 1458, 1558, 1572, 1342, 1194, 1009, 822, 729, 724, 610, 539, 490, 449, 411, 420], '2020': [1095, 1099, 1078, 1159, 898, 828, 658, 704, 610, 644, 602, 773, 809, 951, 869, 1015, 921, 929, 853, 869, 808, 835, 879, 933, 999, 1212, 1309, 1557, 1706, 1711, 1789, 1824, 1912, 1848, 1911, 1827, 1558, 1365, 1268, 1088, 1201, 1067, 1102, 1186, 1204, 1198, 1144, 1181], '2021': [1250, 1168, 1108, 1042, 992, 891, 784, 747, 738, 994, 1037, 1400, 1736, 1978, 2160, 2903, 2378, 2111, 1999, 1945, 1750, 2119, 2196, 2332, 2566, 2682, 2707, 3193, 3285, 3787, 4250, 4656, 4486, 4345, 4651, 4059, 3166, 2599, 2234, 2037, 1917, 1826, 1899, 1887, 1628, 1552, 1517, 1358]},
	'45 50': {'2016': [37, 37, 20, 37, 48, 35, 29, 40, 22, 63, 76, 100, 130, 182, 173, 188, 185, 201, 158, 128, 150, 128, 138, 134, 112, 151, 72, 86, 105, 119, 127, 113, 128, 155, 141, 150, 126, 118, 95, 94, 60, 28, 21, 32, 33, 36, 44, 38], '2017': [54, 44, 36, 40, 57, 43, 63, 60, 51, 93, 106, 166, 190, 227, 227, 243, 301, 217, 239, 187, 205, 185, 205, 210, 209, 217, 149, 196, 182, 242, 204, 247, 217, 270, 267, 271, 238, 168, 140, 108, 59, 64, 53, 96, 74, 104, 77, 81], '2018': [80, 65, 87, 73, 107, 88, 85, 90, 82, 85, 174, 250, 249, 360, 349, 401, 351, 358, 373, 338, 303, 301, 291, 342, 366, 414, 354, 370, 400, 439, 435, 466, 435, 489, 477, 513, 425, 404, 289, 274, 172, 173, 135, 158, 122, 142, 111, 103], '2019': [196, 185, 141, 165, 127, 182, 138, 136, 142, 207, 303, 405, 486, 678, 764, 755, 720, 828, 727, 679, 657, 728, 668, 678, 769, 782, 718, 749, 757, 828, 820, 771, 798, 866, 918, 893, 769, 719, 562, 525, 424, 380, 358, 470, 290, 301, 234, 242], '2020': [641, 715, 656, 660, 620, 519, 446, 450, 382, 460, 450, 494, 492, 555, 547, 631, 610, 523, 513, 480, 465, 471, 553, 565, 637, 742, 757, 934, 962, 979, 1043, 1126, 1134, 1063, 1033, 989, 1025, 939, 837, 779, 718, 774, 784, 855, 753, 732, 708, 677], '2021': [708, 670, 692, 591, 641, 488, 553, 515, 517, 654, 815, 1170, 1340, 1577, 1695, 1794, 1528, 1561, 1518, 1559, 1482, 1760, 1814, 1630, 1771, 1872, 2014, 2167, 2481, 2398, 2469, 2725, 2547, 2515, 2675, 2478, 2009, 1884, 1752, 1595, 1517, 1497, 1472, 1303, 1251, 1132, 956, 884]},

}
let boundaries = {
	// 24
	'24 27': [205, 226],
	'27 30': [183,204],
	'30 33': [161, 182],
	'33 36': [139, 160],
	'36 39': [117,138],
	
	'39 42': [95, 116],
	'42 45': [73, 94],
	'45 50': [50, 72],
}

// relative max values
let all_maxes = {
	'24 27': 7125,
	'27 30': 7401,
	'30 33': 6125,
	'33 36': 15495,
	'36 39': 11852,
	'39 42': 9612,
	'42 45': 4656,
	'45 50': 2725
}
// FONTS
let rubik;
let clockfont;

// mapimg
let img;

// parameters to define radius
let r = 100;
let secondsRadius = r * 0.4;
let minutesRadius = r * 0.3;
let hoursRadius = r * 0.15;


// image load
let ylevel=60;
let xlevel = 20;
my_red = "#ff0000";
my_orange = "#ffa062";
my_blue = "#3f44d8";
// preload
function preload(){
	img = loadImage('usapic.png');

	// load fonts
	rubik = loadFont('RubikDirt-Regular.ttf');
	clockfont = loadFont('NotoSerifKhojki-VariableFont_wght.ttf');
}

// setup
function setup() {

  c = createCanvas(windowWidth, windowHeight);  
	time_tick = millis();
	// determine time
	let s = second();
  let m = minute();
  let h = hour() ;
	current_time = [h,m,nf(s, 2)]

}

// drawing other waves
function drawOthers(this_year, dictionary, multi, max_value){
	while (this_year >=2016){
		// draw wave with muted alpha
		this_color = color(all_colors[this_year.toString()]);
		this_color.setAlpha(70);
		// start drawing
		push();
		beginShape();
		stroke(this_color);
		strokeWeight(3);

		let other_info = dictionary[this_year.toString()]
		let max_i = other_info.indexOf(Math.max(...other_info));
		for(let i=0;i<ticks;i++){
			let val = other_info[i] * multi;
			let ang = i*360/ticks;  
			// use map to scale based on max
			// get radio button value
			let scaled_val = map(val, 0, max_value, 0,windowHeight/2)
			let x = (scaled_val + r/2+r/9)* cos(radians(ang-90));
			let y = (scaled_val + r/2+r/9) * sin(radians(ang-90));

			curveVertex(x,y);
			
			if (i == max_i){
				push();
				fill(this_color);
				ellipse(x, y, 12);
				pop();
			}

		}
		endShape(CLOSE);
		pop();
		
		// increment year
		this_year -=1;
	}
}

// graphing function
function drawWave(data, c, multiplier, year_selected, lat_dict, max_value){
	foundmax = false;
	drawOthers(int(year_selected)-1, lat_dict, multiplier, max_value);
	push();
	beginShape();
	stroke(c);
	strokeWeight(4);

	let text_coord = [];
	let max_i = data.indexOf(Math.max(...data));
	let maxval;
	for(let i=0;i<t;i++){

		let val = data[i] * multiplier;
		let ang = i*360/ticks;  
		let scaled_val = map(val, 0, max_value, 0,windowHeight/2)
		let x = (scaled_val + r/2+r/9)* cos(radians(ang-90));
		let y = (scaled_val + r/2+r/9) * sin(radians(ang-90));


		let xd = (r)*cos(radians(ang-90));
		let yd = (r)*sin(radians(ang-90)); 

		// push();
		curveVertex(x,y);
		// find if this is the max
		if (i == max_i){
			ellipse(x, y, 12);
			textcolor = all_colors[year_selected.toString()]
			let xval = x;
			let yval = y+20;
			if (year_selected == 2021){
				xval += 65;
				yval = y;
			}
			foundmax = true;
			MAXVAL = data[i].toString() 
			MAXHOUR =  floor((i*30)/60)

		}


	}
	endShape(CLOSE);
	pop();

}

// for clock markings
function markClock(){

	
	push();
	strokeWeight(4);
	beginShape(POINTS);
	let hour_mark = 0;
  for (let a = 0; a < 360; a += 7.5) {
		// TODO: label each hour
    let angle = radians(a-90);
    let x =  cos(angle) * secondsRadius;
    let y = sin(angle) * secondsRadius;

		if (a % 45 == 0){
			writeText(clockfont, 10, '#755e5e', CENTER, hour_mark.toString(),x, y);
			hour_mark +=3;
		} 
  }
  endShape();	
	pop();
}
// boundaries function
function drawBounds(){
	push();
	stroke('#b5aeaf');

	
	setLineDash([5, 10, 30, 10]); //another dashed line pattern
	
	for (var key of Object.keys(boundaries)) {
		let thisrange = boundaries[key]
		line(0, thisrange[1], 350, thisrange[1]);

	}
	pop();
}


// draw function
function draw() {


	if (mouseIsPressed) {
		ylevel = mouseY;
		xlevel = mouseX
	}

	let newtarget = targetkey
	if (xlevel >= 10 && xlevel < 350){
		for (var key of Object.keys(boundaries)) {
			let thisrange = boundaries[key]
			if (ylevel>= thisrange[0] && ylevel < thisrange[1]){
				topbound = thisrange[0]
				bottom = thisrange[1]
				newtarget = key;
				break;
			}
		}
	}


	let canvasWidth = windowWidth;
	let canvasHeight = windowHeight;

	
	drawBounds();
	
	push();
	noStroke();

	fill(all_colors[start_arrow]);
	rect(0, topbound, canvasWidth, 25);

	pop();
	push();

	img.resize(330,240);
	noStroke();
	image(img,10,20);
	

	
	// white box
	fill(255);
	// side left
	rect(0, 0, 10, canvasHeight);
	// side right
	rect(10+img.width, 0, canvasWidth, canvasHeight);
	// top
	rect(0, 0, canvasWidth, 20);
	// bottom
	rect(0, (20+img.height), canvasWidth, canvasHeight);
	pop();
	
	// label
	drawtitle();
	drawYears();

	
  noFill();
  translate(width>>1,height>>1);
	// check for new value
	if (newtarget != targetkey){
		// reset parameters
		background(255); 
		t = 0;
		targetkey = newtarget;
		start_arrow = "2016";
	}
	
	// display data
	let data_index = start_arrow.toString();
	let info = lat_info_magnitudes[targetkey][data_index]

	drawWave(info, all_colors[data_index], 1, data_index, lat_info_magnitudes[targetkey], all_maxes[targetkey]);

	// circular clock outline
	push();
  noFill();
  stroke('#755e5e');
	strokeWeight(2);
  ellipse(0,0,r,r);
  fill(0);
	pop();
	
	// timining
	if(millis() - time_tick >= 100){
    if (t < ticks){
			t++;
		} 
    //also update the stored time
    time_tick = millis();
  }
	
	// draw minute marks of clock
	markClock();
	
}


function keyPressed() {

	if (keyCode === RIGHT_ARROW && start_arrow < 2021) {
		start_arrow ++;
		t = 0;
  }
	
	if (keyCode === LEFT_ARROW && start_arrow > 2016) {
		start_arrow --;
		t = 0;
  }
}

// text rendering
function drawtitle(){

	writeText(rubik, 90, '#755e5e', LEFT, 'car crashes.', 2.7*windowWidth/5, 3*windowHeight/20);
	writeText(rubik, 20, '#755e5e', LEFT, 'around the 24-hour clock.', 2.7*windowWidth/5, 4*windowHeight/20);
	writeText(rubik, 20, '#755e5e', LEFT, 'across the nation.', 2.7*windowWidth/5, 4*windowHeight/20+20);

	writeText(rubik, 14, '#755e5e', LEFT, 'The', 20, 280);
	writeText(rubik, 14, all_colors[start_arrow], LEFT, 'CIRCLE', 53, 280);
	writeText(rubik, 14, '#755e5e', LEFT, 'marks the hour', 110, 280);
		writeText(rubik, 14, '#755e5e', LEFT, 'with the greatest number of traffic accidents.', 20, 295);

	writeText(rubik, 14, '#b5aeaf', LEFT, 'Select a latitude range & press [->], [<-] keys to traverse years.', 20, 30);
	
		if (foundmax == true){
			writeText(rubik, 25, all_colors[start_arrow], LEFT, "Within hour " + MAXHOUR+":", 20, 325, false);

			writeText(rubik, 25, all_colors[start_arrow], LEFT, MAXVAL+ " car crashes", 20 , 355, false);
		}
}

// renders years
function drawYears(){
	let year_label = 2016;
	let offset = 1;
	while (year_label <= int(start_arrow)){
		let letter_color = all_colors[year_label.toString()]

		writeText(rubik, 30, letter_color, LEFT, year_label.toString(), 11.5*windowWidth/13,  2.9*windowHeight/20+(offset * 50));
		year_label +=1;
		offset += 1;
	}

}

// general function to write text
function writeText(givenFont, givenSize, colorString, alignment, textString, x, y, strokeStatus=false){
	push();
	textFont(givenFont);
	textSize(givenSize)
	if (strokeStatus == true){
		stroke(colorString);
		strokeWeight(1.5);
	}else{
			noStroke()

	}
	fill(color(colorString))
	textAlign(alignment);
	text(textString, x, y);
	pop();

}

// dotted line
function setLineDash(list) {
  drawingContext.setLineDash(list);
}
